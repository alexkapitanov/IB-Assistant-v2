import pytest
from backend.agents.planner import ask_planner
from backend.json_utils import BadJSON
from unittest.mock import patch
import asyncio


@pytest.mark.asyncio
async def test_planner_with_valid_json():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON –æ—Ç–≤–µ—Ç–æ–º"""
    # –ú–æ–∫–∞–µ–º call_llm —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
    with patch('backend.agents.planner.call_llm') as mock_llm:
        mock_llm.return_value = ('{"need_clarify": false, "draft": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"}', None)
        
        result = await ask_planner("test_thread", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        assert "answer" in result
        assert result["answer"] == "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        assert result["model"] == "gpt-4o"


@pytest.mark.asyncio 
async def test_planner_with_clarification():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        mock_llm.return_value = (
            '{"need_clarify": true, "clarify": "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å"}', 
            None
        )
        
        result = await ask_planner("test_thread", "–ù–µ—Ç–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        assert "answer" in result
        assert result["answer"] == "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å"
        assert result["follow_up"] == True


@pytest.mark.asyncio
async def test_planner_with_bad_json():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
        mock_llm.return_value = ('This is not JSON at all, just text', None)
        
        result = await ask_planner("test_thread", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        assert result["content"] == "ü§ñ –ü–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        assert result["type"] == "chat"
        assert result["role"] == "system"


@pytest.mark.asyncio
async def test_planner_with_malformed_json():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–æ—á—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        # JSON —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
        mock_llm.return_value = ('{"need_clarify": true, "clarify": "–û—Ç–≤–µ—Ç", }', None)
        
        result = await ask_planner("test_thread", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert result["content"] == "ü§ñ –ü–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
