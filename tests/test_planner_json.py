import pytest
from backend.agents.planner import ask_planner
from backend.json_utils import BadJSON
from unittest.mock import patch
import asyncio


@pytest.mark.asyncio
async def test_planner_with_valid_json():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON –æ—Ç–≤–µ—Ç–æ–º"""
    # –ú–æ–∫–∞–µ–º call_llm —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
    with patch('backend.agents.planner.call_llm') as mock_llm:
        mock_llm.return_value = ('{"need_clarify": false, "draft": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"}', None)
        
        result = await ask_planner("test_thread", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        assert "answer" in result
        assert result["answer"] == "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        assert result["model"] == "gpt-4.1"


@pytest.mark.asyncio 
async def test_planner_with_clarification():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        mock_llm.return_value = (
            '{"need_clarify": true, "clarify": "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å"}', 
            None
        )
        
        result = await ask_planner("test_thread", "–ù–µ—Ç–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        assert "answer" in result
        assert result["answer"] == "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å"
        assert result["follow_up"] == True


@pytest.mark.asyncio
async def test_planner_with_bad_json():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
        mock_llm.return_value = ('This is not JSON at all, just text', None)
        
        result = await ask_planner("test_thread", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        assert result["content"] == "ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–ª–∞–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        assert result["type"] == "chat"
        assert result["role"] == "system"


@pytest.mark.asyncio
async def test_planner_with_malformed_json():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–æ—á—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        # JSON —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
        mock_llm.return_value = ('{"need_clarify": true, "clarify": "–û—Ç–≤–µ—Ç", }', None)
        
        result = await ask_planner("test_thread", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {})
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert result["content"] == "ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–ª–∞–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."


@pytest.mark.asyncio
async def test_planner_with_escalation():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π –∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
    with patch('backend.agents.planner.call_llm') as mock_llm, \
         patch('backend.agents.planner.run_expert_gc') as mock_expert_gc:
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ—à–∞–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å
        mock_llm.return_value = (
            '{"need_clarify": false, "need_escalate": true, "draft": ""}', 
            None
        )
        
        # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        mock_expert_gc.return_value = {
            "answer": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            "model": "expert-group-chat"
        }
        
        result = await ask_planner("test_thread", "–°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å", {})

        assert result["answer"] == "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
        assert result["model"] == "expert-group-chat"
        mock_expert_gc.assert_called_once_with("test_thread", "–°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å", {})


@pytest.mark.asyncio
async def test_planner_no_escalation():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±–µ–∑ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"""
    with patch('backend.agents.planner.call_llm') as mock_llm:
        mock_llm.return_value = (
            '{"need_clarify": false, "need_escalate": false, "draft": "–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"}', 
            None
        )
        
        result = await ask_planner("test_thread", "–ß—Ç–æ —Ç–∞–∫–æ–µ SOC?", {})
        
        assert result["answer"] == "–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        assert result["model"] == "gpt-4.1"


def test_planner_returns_json(monkeypatch):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ Planner –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ stub API –∫–ª—é—á–æ–º"""
    from backend.agents.planner import _call_planner_llm
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stub API –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–∏—Ç openai_helpers –≤–µ—Ä–Ω—É—Ç—å –∑–∞–≥–ª—É—à–∫—É
    monkeypatch.setenv("OPENAI_API_KEY", "stub")
    
    try:
        # –ü—Ä–∏ stub –∫–ª—é—á–µ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç–µ–∫—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON
        _call_planner_llm("tid", "–ß—Ç–æ —Ç–∞–∫–æ–µ DLP?", {})
        # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç JSON –±—ã–ª –≤–∞–ª–∏–¥–Ω—ã–º (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)
        assert False, "–û–∂–∏–¥–∞–ª—Å—è BadJSON exception –ø—Ä–∏ stub –∫–ª—é—á–µ"
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É BadJSON
        assert "Bad JSON" in str(e) or "BadJSON" in str(type(e)), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
