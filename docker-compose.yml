version: "3.9"
services:
  archiver:
    image: ib-assistant-v2-backend
    command: ["bash","-c","while true; do python scripts/archive_dialogs.py; sleep 86400; done"]
    volumes:
      - ./backend:/app/backend
      - ./scripts:/app/scripts
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - WEB_SEARCH_TIMEOUT_SEC=3
    depends_on: [qdrant, minio, backend]
  backend:
    image: ib-assistant-v2-backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
      - "50051:50051"   # gRPC
    volumes:
      - ./backend:/app/backend
      - ./tests:/app/tests
      - ./grafana:/app/grafana:ro
      - ./scripts:/app/scripts
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - WEB_SEARCH_TIMEOUT_SEC=3
    depends_on: [redis, qdrant, minio]
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 5s
      retries: 3

  frontend:
    build: 
      context: ./frontend
      args:
        - VITE_BACKEND_HOST=backend
        - VITE_BACKEND_PORT=8000
    ports: [ "5173:80" ]          # production порт
    depends_on: [ backend ]

  redis:
    image: redis:7

  qdrant:
    image: qdrant/qdrant
    ports: ["6333:6333"]

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports: ["9000:9000", "9001:9001"]

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards_data/ib_assistant_overview.json
      - GF_DATASOURCES_DEFAULT_NAME=Loki
      - GF_DATASOURCES_DEFAULT_TYPE=loki
      - GF_DATASOURCES_DEFAULT_URL=http://loki:3100
      - GF_DATASOURCES_DEFAULT_ACCESS=proxy
      - GF_DATASOURCES_DEFAULT_IS_DEFAULT=true
      - GF_SERVER_ROOT_URL=http://localhost:3000

  update_dialog_embeddings:
    image: ib-assistant-v2-backend
    command: python scripts/update_dialog_embeddings.py
    volumes:
      - ./:/app
      - chat_db:/data
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - QDRANT_HOST=qdrant
    depends_on:
      - qdrant
      - backend # Убедимся, что backend собрал chat.db

  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"

volumes:
  chat_db:
