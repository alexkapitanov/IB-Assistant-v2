#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ Web-search Timeouts, Status Bus, Expert GC
"""
import asyncio
import websockets
import json
import time
import random

# --- Web-search Timeouts ---
async def generate_websearch_timeouts():
    print("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é Web-search Timeouts...")
    uri = "ws://localhost:8000/ws"
    # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∑–æ–≤—É—Ç —Ç–∞–π–º–∞—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∞–π—Ç—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    timeout_queries = [
        "–ü–æ–∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: http://timeout-test-{}.com".format(random.randint(10000,99999)),
        "–ù–∞–π–¥–∏ 1000000 —Å—Ç–∞—Ç–µ–π –ø—Ä–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —Ç–µ–º—É {}".format(random.randint(10000,99999)),
        "–ü—Ä–æ–≤–µ–¥–∏ —Å–ª–æ–∂–Ω—ã–π websearch –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ—Å—É—Ä—Å—É {}".format(random.randint(10000,99999)),
    ]
    for query in timeout_queries:
        try:
            async with asyncio.timeout(15):
                async with websockets.connect(uri) as ws:
                    await ws.send(json.dumps({"message": query, "thread_id": f"timeout-{int(time.time())}"}))
                    print(f"üì§ Websearch Timeout –∑–∞–ø—Ä–æ—Å: {query[:60]}...")
                    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    response_count = 0
                    async for msg in ws:
                        response_count += 1
                        if response_count > 2:
                            break
        except Exception as e:
            print(f"‚è∞ –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç: {e}")
        await asyncio.sleep(2)

# --- Expert GC ---
async def generate_expert_gc():
    print("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é Expert GC...")
    uri = "ws://localhost:8000/ws"
    expert_queries = [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π 10 –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ —Å—Ä–∞–≤–Ω–∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã",
        "–ü—Ä–æ–≤–µ–¥–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
    ]
    for query in expert_queries:
        try:
            async with asyncio.timeout(15):
                async with websockets.connect(uri) as ws:
                    await ws.send(json.dumps({"message": query, "thread_id": f"expert-{int(time.time())}"}))
                    print(f"üì§ Expert GC –∑–∞–ø—Ä–æ—Å: {query[:60]}...")
                    response_count = 0
                    async for msg in ws:
                        response_count += 1
                        if response_count > 3:
                            break
        except Exception as e:
            print(f"‚è∞ Expert GC —Ç–∞–π–º–∞—É—Ç: {e}")
        await asyncio.sleep(2)

# --- Status Bus ---
async def generate_status_bus():
    print("üì° –ì–µ–Ω–µ—Ä–∏—Ä—É—é Status Bus...")
    uri = "ws://localhost:8000/ws"
    tasks = []
    for i in range(5):
        async def status_task(idx):
            try:
                async with asyncio.timeout(10):
                    async with websockets.connect(uri) as ws:
                        await ws.send(json.dumps({"message": f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∑–∞–ø—Ä–æ—Å #{idx}", "thread_id": f"status-{idx}-{int(time.time())}"}))
                        print(f"üì§ Status Bus –∑–∞–ø—Ä–æ—Å #{idx}")
                        response_count = 0
                        async for msg in ws:
                            response_count += 1
                            if response_count > 2:
                                break
            except Exception as e:
                print(f"‚è∞ Status Bus —Ç–∞–π–º–∞—É—Ç: {e}")
        tasks.append(status_task(i))
    await asyncio.gather(*tasks)

async def main():
    await generate_websearch_timeouts()
    await generate_expert_gc()
    await generate_status_bus()
    print("\nüéâ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
