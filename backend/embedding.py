import os, openai, functools, hashlib, json, redis

# –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
MODEL = os.getenv("EMBED_MODEL", "text-embedding-3-small")
_r = redis.Redis(host=os.getenv("REDIS_HOST","redis"), decode_responses=True)

def _get_client():
    """–°–æ–∑–¥–∞–µ—Ç OpenAI –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("OPENAI_API_KEY environment variable is required")
    return openai.OpenAI(api_key=api_key)

def _cache_key(txt:str)->str:
    h=hashlib.sha1(txt.encode()).hexdigest()
    return f"emb:{MODEL}:{h}"

def get(text:str)->list[float]:
    text=text[:8192]          # safety
    key=_cache_key(text)
    if vec:=_r.get(key):
        return json.loads(vec)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    api_key = os.getenv("OPENAI_API_KEY", "")
    if api_key.startswith("test_key"):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        print(f"üîß Mock embedding for: {text[:50]}...")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∏–∑ —Ö—ç—à–∞ —Ç–µ–∫—Å—Ç–∞
        import hashlib
        hash_val = int(hashlib.md5(text.encode()).hexdigest()[:8], 16)
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º 1536 (–∫–∞–∫ —É text-embedding-3-small)
        vec = [(hash_val + i) % 100 / 100.0 for i in range(1536)]
        _r.set(key, json.dumps(vec), ex=60*60*24)
        return vec
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API OpenAI v1.0+
    client = _get_client()
    resp = client.embeddings.create(model=MODEL, input=text)
    vec = resp.data[0].embedding
    _r.set(key, json.dumps(vec), ex=60*60*24)
    return vec
