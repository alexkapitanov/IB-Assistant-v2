import os, openai, functools, hashlib, json, redis
from backend.utils import is_test_mode
import warnings

# –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
MODEL = os.getenv("EMBED_MODEL", "text-embedding-3-small")
_r = None

def _get_redis():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global _r
    if _r is None:
        try:
            _r = redis.Redis(host=os.getenv("REDIS_HOST","redis"), decode_responses=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            _r.ping()
        except (redis.ConnectionError, Exception) as e:
            warnings.warn(f"Redis not available, using in-memory cache: {e}")
            _r = {}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ fallback
    return _r

def _get_client():
    """–°–æ–∑–¥–∞–µ—Ç OpenAI –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ"""
    api_key = os.getenv("OPENAI_API_KEY")
    
    # Stub-—Ä–µ–∂–∏–º –¥–ª—è CI –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if api_key == "stub":
        return None  # –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –≤ get()
    
    if not api_key or api_key.startswith("test_"):
        raise ValueError("OPENAI_API_KEY environment variable is required")
    return openai.OpenAI(api_key=api_key)

def _cache_key(txt:str)->str:
    h=hashlib.sha1(txt.encode()).hexdigest()
    return f"emb:{MODEL}:{h}"

def get(text:str)->list[float]:
    text=text[:8192]          # safety
    key=_cache_key(text)
    
    # –ü–æ–ª—É—á–∞–µ–º Redis –∏–ª–∏ fallback
    cache = _get_redis()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
    try:
        if isinstance(cache, dict):
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å fallback
            if key in cache:
                return json.loads(cache[key])
        else:
            # –†–µ–∞–ª—å–Ω—ã–π Redis
            if vec := cache.get(key):
                return json.loads(vec)
    except Exception as e:
        print(f"Cache read error: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENAI_API_KEY")
    
    # Stub-—Ä–µ–∂–∏–º –¥–ª—è CI –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if api_key == "stub":
        print(f"üîß Stub embedding for: {text[:50]}...")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∏–∑ —Ö—ç—à–∞ —Ç–µ–∫—Å—Ç–∞
        import hashlib
        hash_val = int(hashlib.md5(text.encode()).hexdigest()[:8], 16)
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º 1536 (–∫–∞–∫ —É text-embedding-3-small)
        vec = [(hash_val + i) % 100 / 100.0 for i in range(1536)]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        try:
            if isinstance(cache, dict):
                cache[key] = json.dumps(vec)
            else:
                cache.set(key, json.dumps(vec), ex=60*60*24)
        except Exception as e:
            print(f"Cache write error: {e}")
        
        return vec
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if is_test_mode():
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        print(f"üîß Mock embedding for: {text[:50]}...")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∏–∑ —Ö—ç—à–∞ —Ç–µ–∫—Å—Ç–∞
        import hashlib
        hash_val = int(hashlib.md5(text.encode()).hexdigest()[:8], 16)
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º 1536 (–∫–∞–∫ —É text-embedding-3-small)
        vec = [(hash_val + i) % 100 / 100.0 for i in range(1536)]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        try:
            if isinstance(cache, dict):
                cache[key] = json.dumps(vec)
            else:
                cache.set(key, json.dumps(vec), ex=60*60*24)
        except Exception as e:
            print(f"Cache write error: {e}")
        
        return vec
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API OpenAI v1.0+
    client = _get_client()
    resp = client.embeddings.create(model=MODEL, input=text)
    vec = resp.data[0].embedding
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    try:
        if isinstance(cache, dict):
            cache[key] = json.dumps(vec)
        else:
            cache.set(key, json.dumps(vec), ex=60*60*24)
    except Exception as e:
        print(f"Cache write error: {e}")
    
    return vec
