from backend.memory import get_mem, save_mem
from backend.agents.file_retrieval import get_file_link
from backend.agents.local_search import local_search
from backend.agents.planner import ask_planner
from backend.agents.critic import ask_critic
import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ agents –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from agents.refine import refine
from backend.openai_helpers import call_llm
from backend.status_bus import publish
import backend.tracing # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
import backend.logging_config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import structlog

log = structlog.get_logger()

DEF_INTENT_PROMPT = """
–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ò–ë).
–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
  ‚Ä¢ get_file      ‚Äî —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª (–æ–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç, datasheet, PDF, —á–µ–∫-–ª–∏—Å—Ç).
  ‚Ä¢ simple_faq    ‚Äî –∫—Ä–∞—Ç–∫–∏–π —Ñ–∞–∫—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ò–ë (—Ç–µ—Ä–º–∏–Ω, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞,
                    ¬´—á—Ç–æ —Ç–∞–∫–æ–µ DLP¬ª, ¬´PCI DSS —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç¬ª).
  ‚Ä¢ complex       ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ä–∞—Å—á—ë—Ç TCO,
                    –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –≥–ª—É–±–æ–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.

–í–µ—Ä–Ω–∏ –û–î–ù–û —Å–ª–æ–≤–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫: get_file / simple_faq / complex
"""

def classify(user_q: str, slots: dict) -> str:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        prompt = f"{DEF_INTENT_PROMPT}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_q}"
        res, _ = call_llm("o3-mini", prompt)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        intent = res.strip().lower().replace('"', '').replace("'", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π
        if intent in ["get_file", "simple_faq", "complex"]:
            return intent
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º complex
            return "complex"
            
    except Exception as e:
        log.error("classify.error", error=e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–º
        return "complex"

def cheap_faq_answer(q: str, frags: list):
    """
    –ë—ã—Å—Ç—Ä—ã–π FAQ-–æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ò–ë
    """
    try:
        if not frags:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        
        ctx = "\n\n".join([
            f"- {f['text'][:500]}..." if len(f['text']) > 500 else f"- {f['text']}"
            for f in frags
            if f.get('text', '').strip()
        ])
        
        if not ctx:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        
        prompt = f"""–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ò–ë –∫–æ—Ä–æ—Ç–∫–æ (1-2 –∞–±–∑–∞—Ü–∞),
–æ–ø–∏—Ä–∞—è—Å—å –¢–û–õ–¨–ö–û –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏
¬´–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π¬ª.

### –ö–æ–Ω—Ç–µ–∫—Å—Ç
{ctx}
### –í–æ–ø—Ä–æ—Å
{q}
"""
        
        response, _ = call_llm("o3-mini", prompt)
        return response.strip()
        
    except Exception as e:
        log.error("cheap_faq_answer.error", error=e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

async def handle_message(thread_id: str, user_q: str) -> dict:
    log.info("handle_message.start", thread_id=thread_id, user_q=user_q)
    slots = get_mem(thread_id)
    await publish(thread_id, "thinking")
    intent = classify(user_q, slots)
    log.info("handle_message.intent_classified", intent=intent)
    if intent == "get_file":
        link = get_file_link(user_q, slots.get("product"))
        if link:
            log.info("handle_message.file_found", link=link)
            return {"type": "chat", "role": "assistant", 
                    "content": f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: [—Å–∫–∞—á–∞—Ç—å]({link})", 
                    "intent": intent, "model": "none"}
        else:
            return {"type": "chat", "role": "system",
                    "content": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."}
                    
    if intent == "simple_faq":
        await publish(thread_id, "searching")
        frags = local_search(user_q)[:3]
        log.info("handle_message.simple_faq.frags_found", count=len(frags))
        await publish(thread_id, "generating")
        draft = cheap_faq_answer(user_q, frags)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
        is_confident = await ask_critic(draft)
        if not is_confident:
            log.warning("handle_message.simple_faq.low_confidence", draft=draft)
            return {"type": "chat", "role": "system",
                    "content": "ü§î –ù–µ —É–≤–µ—Ä–µ–Ω –≤ –ø–æ–ª–Ω–æ—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
        
        # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        refined_answer = await refine(draft)
        if not refined_answer:
            log.warning("handle_message.refine.empty_answer", draft=draft)
            return {"type": "chat", "role": "system",
                    "content": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é —á–µ—Ä–Ω–æ–≤–∏–∫.",
                    "intent": intent, "model": "o3-mini"}
        
        return {"type": "chat", "role": "assistant", 
                "content": refined_answer, "intent": intent, "model": "o3-mini"}
    # complex ‚Üí escalate
    await publish(thread_id, "generating")
    result = await ask_planner(thread_id, user_q, slots)
    log.info("handle_message.complex.planner_result", result=result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    if not result or not result.get("answer"):
        return {"type": "chat", "role": "system",
                "content": "ü§î –Ø –∑–∞—Ç—Ä—É–¥–Ω–∏–ª—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å. –£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    answer_text = result.get("answer", "")
    is_confident = await ask_critic(answer_text)
    if not is_confident:
        log.warning("handle_message.complex.low_confidence", answer=answer_text)
        return {"type": "chat", "role": "system",
                "content": "ü§î –ù–µ —É–≤–µ—Ä–µ–Ω –≤ –ø–æ–ª–Ω–æ—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
    
    # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    refined_answer = await refine(answer_text)
    if not refined_answer:
        log.warning("handle_message.refine.empty_answer", draft=answer_text)
        return {"type": "chat", "role": "system",
                "content": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é —á–µ—Ä–Ω–æ–≤–∏–∫.",
                "model": result.get("model", "unknown")}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    response = {
        "type": "chat",
        "role": "assistant", 
        "content": refined_answer,
        "model": result.get("model", "unknown")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "citations" in result:
        response["citations"] = result["citations"]
    
    return response
