from backend.memory import get_mem, save_mem
from backend.agents.file_retrieval import get_file_link
from backend.agents.local_search import local_search
from backend.agents.planner import ask_planner
from backend.openai_helpers import call_llm
from backend.status_bus import publish

DEF_INTENT_PROMPT = """
–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ò–ë).
–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
  ‚Ä¢ get_file      ‚Äî —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª (–æ–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç, datasheet, PDF, —á–µ–∫-–ª–∏—Å—Ç).
  ‚Ä¢ simple_faq    ‚Äî –∫—Ä–∞—Ç–∫–∏–π —Ñ–∞–∫—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ò–ë (—Ç–µ—Ä–º–∏–Ω, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞,
                    ¬´—á—Ç–æ —Ç–∞–∫–æ–µ DLP¬ª, ¬´PCI DSS —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç¬ª).
  ‚Ä¢ capabilities ‚Äî –∑–∞–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (¬´—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å¬ª, ¬´—á—Ç–æ –º–æ–∂–µ—à—å¬ª,
                    ¬´–∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏–∏¬ª, ¬´–ø–æ–º–æ—â—å¬ª, ¬´help¬ª).
  ‚Ä¢ complex       ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ä–∞—Å—á—ë—Ç TCO,
                    –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –≥–ª—É–±–æ–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.

–í–µ—Ä–Ω–∏ –û–î–ù–û —Å–ª–æ–≤–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫: get_file / simple_faq / capabilities / complex
"""

def classify(user_q: str, slots: dict) -> str:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        prompt = f"{DEF_INTENT_PROMPT}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_q}"
        res, _ = call_llm("gpt-4o-mini", prompt)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        intent = res.strip().lower().replace('"', '').replace("'", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π
        if intent in ["get_file", "simple_faq", "capabilities", "complex"]:
            return intent
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º complex
            return "complex"
            
    except Exception as e:
        print(f"‚ùå Error in classify: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–º
        return "complex"

def cheap_faq_answer(q: str, frags: list):
    """
    –ë—ã—Å—Ç—Ä—ã–π FAQ-–æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ò–ë
    """
    try:
        if not frags:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        
        ctx = "\n\n".join([
            f"- {f['text'][:500]}..." if len(f['text']) > 500 else f"- {f['text']}"
            for f in frags
            if f.get('text', '').strip()
        ])
        
        if not ctx:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        
        prompt = f"""–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ò–ë –∫–æ—Ä–æ—Ç–∫–æ (1-2 –∞–±–∑–∞—Ü–∞),
–æ–ø–∏—Ä–∞—è—Å—å –¢–û–õ–¨–ö–û –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏
¬´–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π¬ª.

### –ö–æ–Ω—Ç–µ–∫—Å—Ç
{ctx}
### –í–æ–ø—Ä–æ—Å
{q}
"""
        
        response, _ = call_llm("gpt-4o-mini", prompt)
        return response.strip()
        
    except Exception as e:
        print(f"‚ùå Error in cheap_faq_answer: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

def get_capabilities_answer() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    return """ü§ñ **InfoSec Assistant v2** ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

**–ß—Ç–æ —è —É–º–µ—é:**

üìã **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏**
‚Ä¢ –ü–æ–∏—Å–∫ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤, datasheets, PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —á–µ–∫-–ª–∏—Å—Ç–∞–º –ø–æ –ò–ë-–ø—Ä–æ–¥—É–∫—Ç–∞–º

üîç **–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (FAQ)**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤ –ò–ë (DLP, SIEM, SOC –∏ –¥—Ä.)
‚Ä¢ –ö—Ä–∞—Ç–∫–∏–µ —Ñ–∞–∫—Ç—ã –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞—Ö
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π

üß† **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏**
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ò–ë-—Ä–µ—à–µ–Ω–∏–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞—Å—á—ë—Ç TCO (—Å–æ–≤–æ–∫—É–ø–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–Ω–∏—è)
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

‚ö° **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**
‚Ä¢ Multi-agent —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –±–∞–∑–µ AutoGen
‚Ä¢ RAG —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Qdrant
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket

**–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π:** DLP, SIEM, SOC, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ò–ë, –Ω–æ—Ä–º–∞—Ç–∏–≤—ã, —É—è–∑–≤–∏–º–æ—Å—Ç–∏

–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üõ°Ô∏è"""

async def handle_message(thread_id: str, user_q: str) -> dict:
    slots = get_mem(thread_id)
    await publish(thread_id, "thinking")
    intent = classify(user_q, slots)
    if intent == "get_file":
        link = get_file_link(user_q, slots.get("product"))
        if link:
            return {"answer": f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: [—Å–∫–∞—á–∞—Ç—å]({link})", "intent": intent, "model": "none"}
    if intent == "simple_faq":
        await publish(thread_id, "searching")
        frags = local_search(user_q)[:3]
        await publish(thread_id, "generating")
        draft = cheap_faq_answer(user_q, frags)
        return {"answer": draft, "intent": intent, "model": "gpt-4o-mini"}
    if intent == "capabilities":
        return {"answer": get_capabilities_answer(), "intent": intent, "model": "none"}
    # complex ‚Üí escalate
    await publish(thread_id, "generating")
    result = await ask_planner(thread_id, user_q, slots)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    if not result or not result.get("answer"):
        return {"type": "chat", "role": "system",
                "content": "ü§î –Ø –∑–∞—Ç—Ä—É–¥–Ω–∏–ª—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å. –£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."}
    
    return result
