import autogen, asyncio, time, json, logging
from backend.openai_helpers import call_llm, count_tokens
from backend.memory import get_mem, save_mem
from backend.agents.critic import ask_critic
from backend.agents.expert_gc import run_expert_gc
from backend.json_utils import safe_load, BadJSON
from backend.chat_db import log_raw          # –¥–ª—è –∞—É–¥–∏—Ç–∞

# Alias for backward compatibility with tests
ask_expert_gc = run_expert_gc

logger = logging.getLogger(__name__)

PROMPT = """
–¢—ã ‚Äî Planner-–∞–≥–µ–Ω—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Ä–µ—à–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å.

–í–µ—Ä–Ω–∏ –û–î–ò–ù –æ–±—ä–µ–∫—Ç JSON –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{
 "need_clarify":   true/false,   # –Ω—É–∂–µ–Ω –ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å?
 "clarify":        "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" | "",
 "need_escalate":  true/false,   # –Ω—É–∂–Ω–∞ –ª–∏ –≥–ª—É–±–æ–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ Expert GC?
 "draft":          "–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ escalate=false"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
* –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ª–µ–π –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö;
* –µ—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –º–∞–ª–æ —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è/
  –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏/—Ä–∞—Å—á—ë—Ç–∞ ‚Äî —Å—Ç–∞–≤—å need_escalate=true;
* –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∏—Å—á–µ—Ä–ø—ã–≤–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ SOC?¬ª) ‚Äî
  –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å draft –∏ need_escalate=false.
"""


async def _call_planner_llm(thread_id: str, user_q: str, slots: dict, history: list = None):
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    history_prompt = ""
    if history:
        history_prompt = "\n–ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π:\n" + "\n".join(json.dumps(h, ensure_ascii=False) for h in history)

    raw, _ = call_llm("gpt-4.1", f"{PROMPT}\n–í–æ–ø—Ä–æ—Å: {user_q}\n–°–ª–æ—Ç—ã: {slots}{history_prompt}")
    try:
        # –£–±–∏—Ä–∞–µ–º ```json –∏ ```
        plan = json.loads(raw.replace("```json", "").replace("```", ""))
    except json.JSONDecodeError as e:
        raise BadJSON(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e.msg}", raw) from e

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not all(k in plan for k in ("need_clarify", "clarify", "need_escalate", "draft")):
        raise BadJSON(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {raw}", raw)

    return plan

MAX_ITERATIONS = 3
async def _iterate_plan(thread_id: str, user_q: str, slots: dict):
    history = []
    for i in range(MAX_ITERATIONS):
        plan = await _call_planner_llm(thread_id, user_q, slots, history)
        history.append(plan)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if plan.get("need_clarify"):
            return plan

        # –ï—Å–ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∫—Ä–∏—Ç–∏–∫–æ–º
        if not plan.get("need_escalate"):
            is_ok = await ask_critic(plan.get("draft", ""))
            if is_ok:
                return plan
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∏–¥–µ–º –Ω–∞ –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                history.append({"plan": plan, "critic": "–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å"})
        else:
            # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ä–∞–∑—É —Ä–µ—à–∏–ª —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å, –≤—ã—Ö–æ–¥–∏–º
            return plan

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, —ç—Å–∫–∞–ª–∏—Ä—É–µ–º
    return {"need_escalate": True, "draft": ""}


async def ask_planner(thread_id: str, user_q: str, slots: dict):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    try:
        plan = await _iterate_plan(thread_id, user_q, slots)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if plan.get("need_clarify"):
            return {"answer": plan.get("clarify"), "follow_up": True, "model": "gpt-4.1"}
        # –ï—Å–ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if not plan.get("need_escalate"):
            return {"answer": plan.get("draft", ""), "model": "gpt-4.1"}
        # –ò–Ω–∞—á–µ —ç—Å–∫–∞–ª–∏—Ä—É–µ–º –∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
        final = await run_expert_gc(thread_id, user_q, slots)
        return final
        
    except BadJSON as e:
        logger.error(f"Planner failed to parse LLM response: {e.raw_json}")
        return {"type": "chat", "role": "system",
                "content": "ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–ª–∞–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
