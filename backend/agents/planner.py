import autogen, asyncio, time, json, logging
from backend.openai_helpers import call_llm
from agents.expert_gc import expert_group_chat
from backend.json_utils import safe_load, BadJSON
from backend.chat_db import log_raw          # –¥–ª—è –∞—É–¥–∏—Ç–∞

logger = logging.getLogger(__name__)

PROMPT = """
–¢—ã ‚Äî Planner-–∞–≥–µ–Ω—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Ä–µ—à–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å.

–í–µ—Ä–Ω–∏ –û–î–ò–ù –æ–±—ä–µ–∫—Ç JSON –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{
 "need_clarify":   true/false,   # –Ω—É–∂–µ–Ω –ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å?
 "clarify":        "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" | "",
 "need_escalate":  true/false,   # –Ω—É–∂–Ω–∞ –ª–∏ –≥–ª—É–±–æ–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ Expert GC?
 "draft":          "–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ escalate=false"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
* –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ª–µ–π –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö;
* –µ—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –º–∞–ª–æ —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è/
  –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏/—Ä–∞—Å—á—ë—Ç–∞ ‚Äî —Å—Ç–∞–≤—å need_escalate=true;
* –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∏—Å—á–µ—Ä–ø—ã–≤–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ SOC?¬ª) ‚Äî
  –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å draft –∏ need_escalate=false.
"""

def _call_planner_llm(thread_id: str, user_q: str, slots: dict):
    raw, _ = call_llm("gpt-4o", f"{PROMPT}\n–í–æ–ø—Ä–æ—Å: {user_q}\n–°–ª–æ—Ç—ã: {slots}")
    log_raw(thread_id, 0, "gpt-4o", raw)       # turn_index=0 = —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π
    return safe_load(raw)

async def ask_planner(thread_id, user_q, slots):
    try:
        plan = _call_planner_llm(thread_id, user_q, slots)
    except BadJSON as e:
        logger.warning("Bad JSON from planner: %s", e)
        return {"type": "chat", "role": "system",
                "content": "ü§ñ –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–ª–∞–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if plan.get("need_clarify"):
        return {"answer": plan.get("clarify"), "follow_up": True, "model": "gpt-4o"}
    # –ï—Å–ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if not plan.get("need_escalate"):
        return {"answer": plan.get("draft", ""), "model": "gpt-4o"}
    # –ò–Ω–∞—á–µ —ç—Å–∫–∞–ª–∏—Ä—É–µ–º –∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
    final = await expert_group_chat(user_q)
    return final
