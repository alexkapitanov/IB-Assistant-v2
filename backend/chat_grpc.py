# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: chat.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import chat_pb2


class ChatBase(abc.ABC):

    @abc.abstractmethod
    async def Stream(self, stream: 'grpclib.server.Stream[chat_pb2.ChatMessage, chat_pb2.ChatMessage]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/Chat/Stream': grpclib.const.Handler(
                self.Stream,
                grpclib.const.Cardinality.STREAM_STREAM,
                chat_pb2.ChatMessage,
                chat_pb2.ChatMessage,
            ),
        }


class ChatStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Stream = grpclib.client.StreamStreamMethod(
            channel,
            '/Chat/Stream',
            chat_pb2.ChatMessage,
            chat_pb2.ChatMessage,
        )
