import React, { createContext, useState, useEffect, useRef, useContext, ReactNode } from 'react';
import { WS_URL } from '../ws';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
export type ChatMsg = {
  role: "user" | "assistant" | "system" | "file";
  content: string;
  name?: string;
};

interface AppContextType {
  chat: ChatMsg[];
  status: string;
  connected: boolean;
  send: (message: string) => void;
  uploadFile: (file: File) => void;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º undefined
const AppContext = createContext<AppContextType | undefined>(undefined);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∞ —É –≤–∞—Å –µ—Å—Ç—å)
const mapStatus = (status: string) => {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
    const statusMap: { [key: string]: string } = {
        'thinking': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...',
        'searching': '–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...',
        'generating': '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...',
    };
    return statusMap[status] || status;
}


// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä
export const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [chat, setChat] = useState<ChatMsg[]>([
    {
      role: "assistant",
      content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?",
    },
  ]);
  const [status, setStatus] = useState("");
  const [connected, setConnected] = useState(false);
  const wsRef = useRef<WebSocket>();
  const reconnectTimer = useRef<number>();

  useEffect(() => {
    const connect = () => {
      const ws = new WebSocket(WS_URL);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log("‚úÖ WS connected");
        setConnected(true);
        if (reconnectTimer.current) clearTimeout(reconnectTimer.current);
      };

      ws.onclose = () => {
        console.log("üîå WS disconnected, attempting to reconnect...");
        setConnected(false);
        reconnectTimer.current = window.setTimeout(connect, 2000);
      };

      ws.onmessage = (e) => {
        try {
          const m = JSON.parse(e.data);
          if (m.type === "session") {
            console.log(`Received session ID: ${m.sessionId}`);
            if (window.initializeLogStream) {
              window.initializeLogStream(m.sessionId);
            }
            return;
          }
          if (m.type === "status") {
            setStatus(mapStatus(m.status));
            return;
          }
          if (m.type === "error") {
            setChat((c) => [...c, { role: "system", content: `‚ö†Ô∏è ${m.msg} (ID ${m.id})` }]);
            setStatus("");
            return;
          }
          if (m.type === "file") {
            setChat((c) => [...c, { role: "file", content: m.url, name: m.name }]);
            setStatus("");
            return;
          }
          setChat((c) => [...c, { role: m.role ?? "assistant", content: m.content }]);
          setStatus("");
        } catch (error) {
          setChat((c) => [...c, { role: "assistant", content: e.data }]);
          setStatus("");
        }
      };

      ws.onerror = (err) => {
        console.error("WS error:", err);
        ws.close();
      };
    };

    connect();

    return () => {
      if (reconnectTimer.current) clearTimeout(reconnectTimer.current);
      wsRef.current?.close();
    };
  }, []);

  const send = (message: string) => {
    if (!message.trim() || !connected) return;
    const wsMessage = { message };
    wsRef.current?.send(JSON.stringify(wsMessage));
    setChat((c) => [...c, { role: "user", content: message }]);
  };

  const uploadFile = (file: File) => {
    if (!connected) return;
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const message = { message: `upload:${file.name}` };
    wsRef.current?.send(JSON.stringify(message));
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ UI
    console.log(`Initiating upload for: ${file.name}`);
  };

  const value = {
    chat,
    status,
    connected,
    send,
    uploadFile,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useAppContext = () => {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};
