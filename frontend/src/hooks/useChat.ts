import { useState, useEffect, useRef } from "react";
import { WS_URL } from "../ws";

// –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
export type ChatMsg = {
  role: "user" | "assistant" | "system";
  content: string;
};

type WsMessage = {
  type: "session" | "status" | "message";
  sessionId?: string;
  status?: string;   // stage
  detail?: string;   // optional detail
  role?: "user" | "assistant";
  content?: string;
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π —á–∞—Ç–∞
export function useChat() {
  const [chat, setChat] = useState<ChatMsg[]>([
    {
      role: "assistant",
      content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?",
    },
  ]);
  const [status, setStatus] = useState("");
  const [connected, setConnected] = useState(false);
  const wsRef = useRef<WebSocket>();
  const reconnectTimer = useRef<number>();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
  const mapStatus = (s?: string) => {
    return s === "thinking" ? "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç‚Ä¶" :
           s === "searching" ? "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏—â–µ—Ç‚Ä¶" :
           s === "generating" ? "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶" : "";
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  useEffect(() => {
    const connect = () => {
      const ws = new WebSocket(WS_URL);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log("‚úÖ WS connected");
        setConnected(true);
        if (reconnectTimer.current) clearTimeout(reconnectTimer.current);
      };

      ws.onclose = () => {
        console.log("üîå WS disconnected, attempting to reconnect...");
        setConnected(false);
        reconnectTimer.current = window.setTimeout(connect, 2000);
      };

      ws.onmessage = (e) => {
        try {
          const m: WsMessage = JSON.parse(e.data);
          switch (m.type) {
            case "session":
              console.log(`Received session ID: ${m.sessionId}`);
              if (window.initializeLogStream && m.sessionId) {
                window.initializeLogStream(m.sessionId);
              }
              break;
          case "status":
            // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º stage + detail, auto-hide on "done"
            if (m.status) {
              const text = mapStatus(m.status) + (m.detail ? `: ${m.detail}` : "");
              setStatus(text);
              if (m.status === "done") {
                setTimeout(() => setStatus(""), 2000);
              }
            }
            return;
            default:
              if (m.content) {
                setChat((c) => [...c, { role: m.role ?? "assistant", content: m.content as string }]);
              }
              setStatus("");
          }
        } catch (error) {
          setChat((c) => [...c, { role: "assistant", content: e.data }]);
          setStatus("");
        }
      };

      ws.onerror = (err) => {
        console.error("WS error:", err);
        ws.close();
      };
    };

    connect();

    return () => {
      if (reconnectTimer.current) clearTimeout(reconnectTimer.current);
      wsRef.current?.close();
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = (message: string) => {
    if (!message.trim() || !connected) return;
    wsRef.current?.send(message);
    setChat((c) => [...c, { role: "user", content: message }]);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
  const sendFile = (file: File) => {
    if (!connected) return;
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, 
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏
    wsRef.current?.send(`upload:${file.name}`);
    setChat((c) => [...c, { role: "user", content: `–§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${file.name}` }]);
  }

  return { chat, status, connected, sendMessage, sendFile };
}
